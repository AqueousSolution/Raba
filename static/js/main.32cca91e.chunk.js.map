{"version":3,"sources":["Components/Auth/Login.js","Components/Navigation/SignedIn.js","Components/Layers/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","Component","state","email","password","className","alt","src","href","onSubmit","this","handleSubmit","type","name","placeholder","onChange","event","setState","target","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"mOA4EeA,GC1EQC,YCACA,Y,2MFCtBC,MAAQ,CACNC,MAAO,GACPC,SAAU,I,wEAEF,IAAD,OACP,OACE,6BACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,gBACb,yBACEA,UAAU,YACVC,IAAI,OACJC,IAAI,6BAKV,yBAAKF,UAAU,eACb,6BACE,uBAAGG,KAAK,IACN,yBAAKF,IAAI,OAAOC,IAAI,6BAFxB,QAOA,yBAAKF,UAAU,YACb,wBAAIA,UAAU,cAAd,0BACA,wBAAIA,UAAU,UAAd,WACA,yBAAKA,UAAU,YACb,0BAAMI,SAAUC,KAAKC,cACnB,oCACA,2BACEC,KAAK,OACLC,KAAK,OACLC,YAAY,QACZC,SAAU,SAAAC,GAAK,OACb,EAAKC,SAAS,CAAEd,MAAOa,EAAME,OAAOC,WAIxC,2BACEP,KAAK,OACLC,KAAK,OACLC,YAAY,WACZC,SAAU,SAAAC,GAAK,OACb,EAAKC,SAAS,CAAEb,SAAUY,EAAME,OAAOC,WAG3C,uBAAGd,UAAU,YAAYG,KAAK,KAA9B,uBAIA,6BACA,6BACA,4CAIJ,4BAAQH,UAAU,UAChB,yBAAKE,IAAI,2BAA2BD,IAAI,WACxC,uDAEF,4BAAQD,UAAU,YAChB,yBAAKE,IAAI,6BAA6BD,IAAI,aAC1C,+D,GAjEML,cGYLmB,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.32cca91e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Login extends Component {\n  state = {\n    email: {},\n    password: {}\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"split left\">\n          <div className=\"logoposition\">\n            <img\n              className=\"whitelogo\"\n              alt=\"Logo\"\n              src=\"./images/logowhite.png\"\n            />\n          </div>\n        </div>\n\n        <div className=\"split right\">\n          <nav>\n            <a href=\"\">\n              <img alt=\"left\" src=\"./images/arrow-left.png\" />\n            </a>\n            Back\n          </nav>\n\n          <div className=\"centered\">\n            <h1 className=\"mainheader\">Log-In To Your Account</h1>\n            <h1 className=\"header\">Log In </h1>\n            <div className=\"loginbox\">\n              <form onSubmit={this.handleSubmit}>\n                <p>Login</p>\n                <input\n                  type=\"text\"\n                  name=\"text\"\n                  placeholder=\"Email\"\n                  onChange={event =>\n                    this.setState({ email: event.target.value })\n                  }\n                />\n\n                <input\n                  type=\"text\"\n                  name=\"text\"\n                  placeholder=\"Password\"\n                  onChange={event =>\n                    this.setState({ password: event.target.value })\n                  }\n                />\n                <a className=\"forgotten\" href=\"#\">\n                  Forgotten Password?\n                </a>\n\n                <br />\n                <br />\n                <button>LOG IN</button>\n              </form>\n            </div>\n\n            <button className=\"google\">\n              <img src=\"./images/google-logo.png\" alt=\"google\" />\n              <span> Sign In With Google</span>\n            </button>\n            <button className=\"facebook\">\n              <img src=\"./images/facebook-logo.png\" alt=\"facebook\" />\n              <span>Sign In With Facebook</span>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\n\nclass SignedIn extends Component {\n  state = {\n    profilePic: []\n  };\n  render() {\n    return (\n      <header>\n        <img className=\"logo\" src=\"images/logo.png\" alt=\" raba logo\" />\n        <nav className=\"container\">\n          <ul className=\"navlinks\">\n            <li>\n              <a href=\"#\">Overview</a>\n            </li>\n            <li>\n              <a href=\"#\">Analytics</a>\n            </li>\n            <li>\n              <a href=\"#\">Catalog</a>\n            </li>\n            <li>\n              <a href=\"#\">Pricing</a>\n            </li>\n            <li>\n              <a href=\"#\">Transactions</a>\n            </li>\n          </ul>\n        </nav>\n        <a className=\"cta\" href=\"#\">\n          <button className=\"blackbutton\">Upload Content</button>\n        </a>\n        <button className=\"profileinfo\">\n          <h3 className=\"profilename\">John. D</h3>\n          <img className=\"profilepic\" src=\"images/Ellipse.png\" />\n        </button>\n      </header>\n    );\n  }\n}\n\nexport default SignedIn;\n","import React, { Component } from \"react\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"toprow\">\n          <div className=\"streamgraph\">\n            <h1>Streaming Graph</h1>\n          </div>\n          <div className=\"piechart\">\n            <h1>Pie Chart</h1>\n          </div>\n        </div>\n        <div className=\"secondrow\">\n          <div className=\"stats\">\n            <div className=\"statscontent\">\n              <h1 className=\"bigdata\">53</h1>\n              <p>Total Amount of Tracks</p>\n            </div>\n            <img className=\"statsicons\" src=\"./images/saleschart.png\" />\n          </div>\n          <div className=\"stats\">\n            <div className=\"statscontent\">\n              <h1 className=\"bigdata\">78</h1>\n              <p>Total Amount of Streams</p>\n            </div>\n            <img className=\"statsicons\" src=\"./images/saleschart.png\" />\n          </div>\n          <div className=\"stats\">\n            <div className=\"statscontent\">\n              <h1 className=\"bigdata\">25</h1>\n              <p>Total Amount of Downloads</p>\n            </div>\n            <img className=\"statsicons\" src=\"./images/saleschart.png\" />\n          </div>\n          <div className=\"stats\">\n            <div className=\"statscontent\">\n              <h1 className=\"bigdata\">$80</h1>\n              <p>Total Amount of Sales</p>\n            </div>\n            <img className=\"statsicons\" src=\"./images/saleschart.png\" />\n          </div>\n        </div>\n        <div className=\"bottomrow\">\n          <div className=\"streamgraph\">\n            <h1>Downloads Graph</h1>\n          </div>\n          <div className=\"topdownloads\">\n            <h1>Top Downloads</h1>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport \"./App.css\";\nimport SignedIn from \"./Components/Navigation/SignedIn\";\nimport Dashboard from \"./Components/Layers/Dashboard\";\nimport Login from \"./Components/Auth/Login\";\n\nfunction App() {\n  return (\n    <div>\n      <Login />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}